     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 0A                          a DB 10
    15 00000001 1E00                        b DW 30
    16 00000003 32000000                    c DD 50
    17 00000007 40420F0000000000            d DQ 1000000
    18 0000000F <res 00000008>              rez RESQ 1
    19                                  
    20                                  ; our code starts here
    21                                  ; Sabo Andrei Claudiu
    22                                  ; a - byte, b - word, c - double word, d - qword - Interpretare fara semn
    23                                  ; (d+d-b)+(c-a)+d
    24                                  segment code use32 class=code
    25                                      start:
    26                                          ; ...
    27 00000000 A1[07000000]                    mov eax, dword[d]
    28 00000005 8B15[0B000000]                  mov edx, dword[d+4] ; edx:eax = d
    29                                          
    30 0000000B 0305[07000000]                  add eax, dword[d]
    31 00000011 1315[0B000000]                  adc edx, dword[d+4] ; edx:eax = d+d
    32                                          
    33 00000017 BB00000000                      mov ebx, 0
    34 0000001C 668B1D[01000000]                mov bx, [b]
    35 00000023 B900000000                      mov ecx, 0 ; ecx:ebx = b
    36                                          
    37 00000028 29D8                            sub eax, ebx
    38 0000002A 19CA                            sbb edx, ecx ; edx:eax = d+d-b
    39                                          
    40 0000002C 0305[03000000]                  add eax, [c]
    41 00000032 11CA                            adc edx, ecx ; edx:eax = d+d-b+c
    42                                          
    43 00000034 BB00000000                      mov ebx, 0
    44 00000039 8A1D[00000000]                  mov bl, [a] ; ecx:ebx = a
    45                                          
    46 0000003F 29D8                            sub eax, ebx
    47 00000041 19CA                            sbb edx, ecx ; edx:eax = (d+d-b)+(c-a)+d
    48                                          
    49 00000043 0305[07000000]                  add eax, dword[d]
    50 00000049 1315[0B000000]                  adc edx, dword[d+4]
    51                                          
    52 0000004F A3[0F000000]                    mov dword[rez], eax
    53 00000054 8915[13000000]                  mov dword[rez+4], edx
    54                                          
    55 0000005A 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    56 0000005C FF15[00000000]                  call    [exit]       ; call exit to terminate the program
