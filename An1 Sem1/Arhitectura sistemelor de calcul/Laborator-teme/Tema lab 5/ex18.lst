     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 020103FD                    A db 2,1,3,-3
    15                                      lenA equ $-A     ; lenA retine lungimea sirului A
    16 00000004 0405FB07                    B db 4,5,-5,7
    17                                      lenB equ $-B    ; lenB retine lungimea sirului B
    18 00000008 00<rept>                    R times lenA+lenB db 0  ; spatiu rezervat pentru rezultat   
    19                                      
    20                                  ; our code starts here
    21                                  ; Sabo Andrei Claudiu
    22                                  ; Se dau 2 siruri de octeti A si B. Sa se construiasca sirul R care sa contina doar elementele impare si pozitive din cele 2 siruri.
    23                                  ; Exemplu:
    24                                  ; A: 2, 1, 3, -3
    25                                  ; B: 4, 5, -5, 7
    26                                  ; R: 1, 3, 5, 7
    27                                  segment code use32 class=code
    28                                      start:
    29                                          ; ...
    30 00000000 B904000000                      mov ecx, lenA   ; Punem in ecx lungimea sirului A pentru a folosi loop
    31 00000005 BE00000000                      mov esi, 0      ; Folosim esi pentru a stoca numerele in rezultat
    32 0000000A E329                            jecxz sirul_b   ; Daca primul sir are lungimea 0 se trece la sirul al doilea
    33 0000000C BF00000000                      mov edi, 0      ; Folosim edi pentru a parcurge sirul
    34                                          repeta_a:
    35 00000011 8A87[00000000]                      mov al,[A+edi]
    36                                              
    37 00000017 A801                                test al, 1b             
    38 00000019 740B                                jz nr_nu_este_bun_a     ; Daca numarul este par atunci numarul nu este bun
    39                                              
    40 0000001B A880                                test al, 10000000b
    41 0000001D 7507                                jnz nr_nu_este_bun_a     ; Daca numarul este negativ atunci numarul nu este bun
    42                                              
    43 0000001F 8886[08000000]                      mov [R+esi],al          ; Stocam in rezultat numarul daca indeplineste conditiile
    44 00000025 46                                  inc esi
    45                                              nr_nu_este_bun_a:
    46 00000026 47                                  inc edi
    47 00000027 E2E8                            loop repeta_a
    48                                          
    49 00000029 B904000000                      mov ecx, lenB           ; analog pentru al doilea sir ca si la primul sir
    50 0000002E E31D                            jecxz end_program
    51 00000030 BF00000000                      mov edi, 0
    52                                          sirul_b:
    53                                              repeta_b:
    54 00000035 8A87[04000000]                      mov al,[B+edi]
    55                                              
    56 0000003B A801                                test al,1b
    57 0000003D 740B                                jz nr_nu_este_bun_b
    58                                              
    59 0000003F A880                                test al, 10000000b
    60 00000041 7507                                jnz nr_nu_este_bun_b
    61                                              
    62 00000043 8886[08000000]                      mov [R+esi],al
    63 00000049 46                                  inc esi
    64                                              nr_nu_este_bun_b:
    65 0000004A 47                                  inc edi
    66                                          
    67 0000004B E2E8                            loop repeta_b
    68                                          
    69                                      end_program:
    70                                          ; exit(0)
    71 0000004D 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    72 0000004F FF15[00000000]                  call    [exit]       ; call exit to terminate the program
